# TODO: Improvements
#         - Comments
#         - Better user output
name: Automatically release and publish to nuget.org

# TODO: Run automatically
on:
  #workflow_dispatch:
  push:
    branches:
      - main

# TODO: Split into two workflows, one that does testing and one that does release and publish. Call the two
#       workflows from a workflow that runs on push to main.

jobs:
  test:
    uses: ./.github/workflows/tests.yml

  get-package-metadata:
    name: Get package metadata
    runs-on: ubuntu-latest
    outputs:
      package-version: ${{ steps.get-package-version.outputs.package-version }}
      package-id: ${{ steps.get-package-id.outputs.package-id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8
      - name: Get package version
        id: get-package-version
        run: echo "package-version=$(dotnet build EHonda.HelloNuget --getProperty:PackageVersion)" >> "$GITHUB_OUTPUT"
      - name: Get package id
        id: get-package-id
        run: echo "package-id=$(dotnet build EHonda.HelloNuget --getProperty:PackageId)" >> "$GITHUB_OUTPUT"

  # TODO: Improvements:
  #         - Check if we're >= any existing version
  check-nuget-exists:
    name: Check nuget.org package exists
    runs-on: ubuntu-latest
    needs: get-package-metadata
    outputs:
      should-release: ${{ steps.check-nuget-exists.outputs.should-release }}
    steps:
      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8
      - name: Check nuget.org package exists
        id: check-nuget-exists
        env:
          PACKAGE_VERSION: ${{ needs.get-package-metadata.outputs.package-version }}
          PACKAGE_ID: ${{ needs.get-package-metadata.outputs.package-id }}
        run: |
          LATEST_PACKAGE=$(nuget list $PACKAGE_ID -Source https://api.nuget.org/v3/index.json)
          LATEST_VERSION=$(echo $LATEST_PACKAGE | awk '{print $NF}')
          if [ "$LATEST_VERSION" == "$PACKAGE_VERSION" ]; then
            echo -e "\e[32mINFO:\e[0m Package $PACKAGE_ID@$PACKAGE_VERSION already exists"
            echo "should-release=false" >> $GITHUB_OUTPUT
          else
            echo -e "\e[32mINFO:\e[0m Package $PACKAGE_ID@$PACKAGE_VERSION does not exist"
            echo "should-release=true" >> $GITHUB_OUTPUT
          fi

  create-release:
    name: Create release
    runs-on: ubuntu-latest
    permissions:
      # Required to create the release
      contents: write
    needs: [get-package-metadata, check-nuget-exists]
    # This is the best way to check a "boolean" job output, as documented in the tests conducted in 'should-release.yml'
    if: needs.check-nuget-exists.outputs.should-release == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Create release
        env:
          PACKAGE_VERSION: ${{ needs.get-package-metadata.outputs.package-version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release create "v$PACKAGE_VERSION" --generate-notes

  # Moved here from publish.yml because we can't trigger that workflow with our release creation action using
  # GITHUB_TOKEN. As a workaround, for now, we copy the job here and make it need create-release.
  publish:
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8
      - name: Pack
        run: dotnet pack --configuration Release --output ./packages
      - name: Push to NuGet.org
        run: dotnet nuget push ./packages/*.nupkg --source https://api.nuget.org/v3/index.json --api-key "$NUGET_ORG_API_KEY"
        # Don't use the secret directly, but set it as an environment variable, as documented here:
        #   - https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions#using-secrets-in-a-workflow
        #   - https://github.com/actions/setup-dotnet#nugetorg
        env:
          NUGET_ORG_API_KEY: ${{ secrets.NUGET_ORG_API_KEY }}
