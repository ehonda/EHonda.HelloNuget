<Project Sdk="Microsoft.NET.Sdk">

    <!-- General dotnet / C# settings for the project -->
    <PropertyGroup>
        <TargetFramework>net7.0</TargetFramework>
        <ImplicitUsings>enable</ImplicitUsings>
        <Nullable>enable</Nullable>
        <!--
            We want to include JetBrains.Annotations because some of them (e.g. Pure) are intended for consumers of our
            api
        -->
        <DefineConstants>JETBRAINS_ANNOTATIONS</DefineConstants>
    </PropertyGroup>

    <!--
        NuGet package
            * Includes all recommended metadata according to
              https://learn.microsoft.com/en-us/nuget/create-packages/package-authoring-best-practices#package-metadata
    -->
    <PropertyGroup>
        <!--
            * We use `Version` instead of `PackageVersion` because `Version` is the default for a variety of other
              version related MSBuild properties, so we set consistent versions for the various built artifacts (e.g.
              package and assembly file) this way.
            * See (Under "Notes about these settings:"):
              https://learn.microsoft.com/en-us/dotnet/core/project-sdk/msbuild-props#generateassemblyinfo
            * See (Under `PackageVersion`):
              https://learn.microsoft.com/en-us/nuget/reference/msbuild-targets#pack-target-inputs
         -->
        <Version>0.8.0</Version>
        <PackageId>EHonda.HelloNuget</PackageId>
        <Authors>Dennis Renz</Authors>
        <Description>A nuget package to try out best practices with.</Description>
        <Copyright>Copyright (c) Dennis Renz 2023</Copyright>
        <PackageProjectUrl>https://github.com/ehonda/EHonda.HelloNuget</PackageProjectUrl>
        <!--
            Path is relative to the root of the package (see:
            https://learn.microsoft.com/en-us/nuget/reference/msbuild-targets#packagereadmefile) and we also need to
            pack the readme, which is done in the ItemGroup below
        -->
        <PackageReadmeFile>README.md</PackageReadmeFile>
        <PackageTags>sample nuget-best-practices</PackageTags>
        <PackageReleaseNotes>Include JetBrains annotations.</PackageReleaseNotes>
        <!--
            License file is the recommended way to include license information (over license file or license url), see:
            https://learn.microsoft.com/en-us/nuget/create-packages/package-authoring-best-practices#if-your-package-is-open-source
        -->
        <PackageLicenseExpression>MIT</PackageLicenseExpression>
    </PropertyGroup>
    
    <!--
        Pack readme file
            * Include path is relative to this .csproj file
            * Package path is the package root, as specified in the PackageReadmeFile metadata element (see above)
            * See: https://learn.microsoft.com/en-us/nuget/reference/msbuild-targets#packagereadmefile
    -->
    <ItemGroup>
        <None Include="..\README.md" Pack="true" PackagePath="\" />
    </ItemGroup>
    
    <!-- SourceLink -->
    <PropertyGroup>
        <PublishRepositoryUrl>true</PublishRepositoryUrl>
        
        <!-- Required so compiler-generated sources are included in the PDB -->
        <EmbedUntrackedSources>true</EmbedUntrackedSources>
        
        <!-- 
            Build symbol package, which is the preferred way of distributing symbols (over embedding them in the dll),
            see: https://github.com/dotnet/sourcelink/blob/main/README.md#alternative-pdb-distribution
        -->
        <IncludeSymbols>true</IncludeSymbols>
        <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    </PropertyGroup>

    <!--
        Deterministic build
            * See: https://github.com/clairernovotny/DeterministicBuilds#deterministic-builds
            * Enables 'official build settings' (as opposed to 'local build settings'), see:
              https://learn.microsoft.com/en-us/dotnet/core/project-sdk/msbuild-props#continuousintegrationbuild
            * One example is file paths for PDB Sources (see Nuget Package Explorer or nuget.info), which will be
              normalized when using 'official build settings', and won't be normalized when using local build settings.
                * This means the debugger can find the files with local build settings, but it also means the build will
                  not be deterministic, because stored file paths then depend on the environment the build was executed
                  in, which makes the build non-deterministic
    -->
    <PropertyGroup Condition="'$(GITHUB_ACTIONS)' == 'true'">
        <ContinuousIntegrationBuild>true</ContinuousIntegrationBuild>
    </PropertyGroup>

    <!-- Dependencies -->
    <ItemGroup>
        <!--
            We can't do PrivateAssets="all" for JetBrains.Annotations, because we want to expose them to consumers. It
            does technically work, at least for things like a PureAttribute on a method, but it's unclear whether this
            can have unfavorable consequences (there are certainly ways to make the consumer crash by not having the
            assembly then, e.g. via reflection)
        -->
        <PackageReference Include="JetBrains.Annotations" Version="2022.3.1" />
        <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.1.1">
            <PrivateAssets>all</PrivateAssets>
            <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
        </PackageReference>
    </ItemGroup>

</Project>
